// game job to update incomplete redemption
	// for all hlbs payments check to see if made before making
	// check hlbs payments to see if all have redemptions
		// if no redemption then refund
	// check "reserved" prizes
		// if no redemption then "active" the prize
		// call subclass's onPrizeCancelled method, if jackpot prize then update the asset data
		// if "redeemed" then set

// moving to production
	// prepare databases/servers with ip assignments and ssl certs
	// create db schemas on production
	// create default permissions/roles/users/currencies
	// manually create users/game_houses/games/configs in the database
	// deploy games applications
	// change logs shipped to nancy via rabbitmq?
	// production elastic stack and apm

// testing
	// simulate many user spinning the same pool at the same time vs different pools and so on
	// simulate what happens if no available pool/prize
	// simulate payment failure
	// simulate award payment failure
	// simulate jackpot win with normal/feature

// entity_crud_service
	// add returning support
	// add functional update support
	// add a transactional action that can do insert/update in a transaction, and still create the change logs
	// rewrite place_bet stuff with transaction support