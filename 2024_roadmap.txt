// slot bonanza
	// split game into normal and feature create
	// add pay_table, randomization_params, and pool_data
	// change create pool and generate single prize functions

// game job to update incomplete redemption
	// for all hlbs payments check to see if made before making
	// check hlbs payments to see if all have redemptions
		// if no redemption then refund
	// check "reserved" prizes
		// if no redemption then "active" the prize
		// call subclass's onPrizeCancelled method, if jackpot prize then update the asset data
		// if "redeemed" then set
	// check redemptions
	// if "active"
		// call the subclass's autoCompleteGame method, this is expected to eventually call endGame method
	// if "game_completed"
		// call the subclass's onGameEnded method to update the jackpot asset, if jackpot won then remove the "reserved" tag and set the "last_won" tag
		// set to "return_payment_pending"
	// if "return_payment_pending", first check if the payment was already made
		// if not made make the payment
		// if made update redemption to "finished"

// entity_crud_service
	// add returning support
	// add functional update support
	// add a transactional action that can do insert/update in a transaction, and still create the change logs
	// rewrite place_bet stuff with transaction support

// testing
	// simulate many user spinning the same pool at the same time vs different pools and so on
	// simulate what happens if no available pool/prize
	// simulate payment failure
	// simulate award payment failure
	// simulate jackpot win with normal/feature

// moving to production
	// prepare databases/servers with ip assignments and ssl certs
	// create db schemas on production
	// create default permissions/roles/users/currencies and deploy admin application
	// login as admin user and create users/game_houses/games/configs
	// deploy games applications
	// change logs shipped to nancy via rabbitmq?
	// production elastic stack and apm