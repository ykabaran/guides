apps
	ls_main
		lorena: app_core_reader, ls_data_writer
		bunny: lsports.feed_file.prod, lsports.change_log.prod
	ls_feed_file_cons
		lorena: app_core_reader
		bunny: lsports.feed_file.cons
		nancy: ls_log_writer
	ls_change_log_cons
		lorena: app_core_reader
		bunny: lsports.change_log.cons
		nancy: ls_log_writer

	gs_main
		lorena: app_core_reader, gs_data_writer
		bunny: goalserve.feed_file.prod, goalserve.change_log.prod
	gs_feed_file_cons
		lorena: app_core_reader
		bunny: goalserve.feed_file.cons
		nancy: gs_log_writer
	gs_change_log_cons
		lorena: app_core_reader
		bunny: goalserve.change_log.cons
		nancy: gs_log_writer

	hls_sport_main
		lorena: app_core_reader, ls_data_reader, gs_data_reader, hls_sport_writer
		bunny: hls.sport_change_log
	hls_sport_hlbs
		lorena: app_core_reader, ls_data_reader, gs_data_reader, hls_sport_reader
		hlbs: lsports_hlbs, hlbs, hltt

	hls_game
		lorena: app_core_reader, hls_game_writer,
		lorena: app_user_reader, app_accounting_writer
		hlbs: hlbs
		bunny: hls.game_change_log

	hls_change_log_cons
		lorena: app_core_reader
		bunny: hls.core_change_log.cons, hls.user_change_log.cons, hls.accounting_change_log.cons
		nancy: app_core_log_writer, app_user_log_writer, app_accounting_log_writer
		bunny: hls.sport_change_log.cons, hls.game_change_log.cons
		nancy: hls_sport_log_writer, hls_game_log_writer

	hls_admin
		lorena: app_core_deleter, app_user_deleter, app_accounting_deleter
		bunny: hls.core_change_log.prod, hls.user_change_log.prod, hls.accounting_change_log.prod
		nancy: app_core_log_reader, app_user_log_reader, app_accounting_log_reader
		lorena: ls_data_reader, gs_data_reader
		nancy: ls_log_reader, gs_log_reader
		lorena: hls_sport_deleter, hls_game_deleter
		bunny: hls.sport_change_log.prod, hls.game_change_log.prod
		nancy: hls_sport_log_reader, hls_game_log_reader


rmqs
	lsports
		feed_file
		change_log
	goalserve
		feed_file
		change_log
	hls
		core_change_log
		user_change_log
		accounting_change_log
		sport_change_log
		game_change_log


users
	root:su
		sysadmin: su
		sysdev: su
		hls: hls_admin
			hls.sport: hls_sport_admin
				hls.sport.lsports: ls_admin
					write any ls_base
					write any ls_fixture

				hls.sport.goalserve: gs_admin
					write any gs_base
					write any gs_fixture

				hls.sport.main: hls_sport_admin
					read any ls/gs/hlbs/hls_sport_base
					read any ls/gs/hlbs/hls_sport_fixture
					write any hls_sport_base
					write any hls_sport_fixture

				hls.sport.hlbs: hlbs_admin
					read self app_user
					read self hls_virtual_bookmaker
					read any ls/gs/hlbs/hls_sport_base
					read any ls/gs/hlbs/hls_sport_fixture
					write any hlbs_fixture

			hls.game: hls_game_admin
				read any app_user
				write any app_session
				read any hls_game_house
				write any hls_game_base
				write any hls_game_play
				write any app_accounting
				write any hlbs_accounting
				login any hls_game_house_company_user

			hls.admin: hls_admin
				login any app_user
				write any app_core
				write any app_user
				write any app_session
				write any app_accounting
				write any hls_virtual_bookmaker
				write any hls_game_house
				read any ls/gs/hlbs_base
				read any ls/gs/hlbs_fixture
				write any hls_sport_base
				write any hls_sport_fixture
				write any hls_game_base
				write any hls_game_play

			hls.user: hls_user
				write self app_user
				write self app_accounting
				read any hls_game_base
				write self hls_game_play

		nicobet: company_admin
			nicobet.sport: sports_bookmaker
				loginto hls.admin
				read self app_user
				write self app_session
				write self hls_virtual_bookmaker
				read any ls/gs/hlbs/hls_sport_base
				read any ls/gs/hlbs/hls_sport_fixture

			nicobet.game: game_house
				loginto hls.admin
				read self app_user
				write self app_session
				read any hls_game_base
				write self hls_game_house
				write company app_user
				write self app_accounting
				write self hls_game_play

			nicobet.admin[]: company_admin
				loginto hls.admin
				write company app_user
				write company hls_virtual_bookmaker
				write company hls_game_house

			nicobet.user[]: company_user
				loginto company hls.game
				read any hls_game_base
				write self app_user
				write self app_session
				write self app_accounting
				write self hls_game_play

nicobet.user -> nicobet : game_play_request
nicobet.game -> hls.game : company_user_login_request { app_id: nicobet.game, api_key, user_id }
hls.game -> nicobet.game : signed_token_response { app_id: nicobet.game, user_id, signature }
nicobet.game -> nicobet.user : signed_token_response { app_id: nicobet.game, user_id, signature }
nicobet.user -> hls.game : login_request { app_id: nicobet.game, user_id, signature }
hls.game -> nicobet.user : auth_token_response { app_id: nicobet.game, user_id, signature }
-- we are here
nicobet.user -> hls.game : game_config_request { app_id: nicobet.game, game_id }
hls.game -> nicobet.user : game_config_response {}
nicobet.user -> hls.game : game_play_request { app_id: nicobet.game, user_id, game_id, bet_stake }
hls.game -> nicobet.game : payment_request { app_id: nicobet.game, user_id, game_id, bet_stake, prize_id, contract_id }
nicobet.game -> hls.game : payment_response { contract_id, transaction_id }
hls.game -> nicobet.user : game_play_response { prize_id, prize }
nicobet.user -> hls.game : game_move_request { app_id: nicobet.game, user_id, game_id, prize_id, move }
hls.game -> nicobet.user : game_move_response { prize_id, prize }

app_tools
// dependency tree docs and other project updates

hls_game
	create game/game_house/game_house_config
	hls_game/get_config
	create test game
	hls_game/game_name/start
	hls_game/game_name/move
	create accountless play

hls_account
// implementations
// docs

hls_game
// multiplayer_pvh game
// multiplayer_pvp game

hls_game
// cross-login
	// create user if id given
	// create a wallet for the user/session
	// get accounts via backend request
	// create missing accounts
	// update account balances
	// disable non-existent accounts
	// return auth_token

ls/gs
// service status updates

hls_sport
// service status updates
// remove/link duplicate fixtures
// point by point data models

hls_admin
// service status updates

app_tools project
// improve entity_crud
	// respect all permissions for select/insert/update/delete
	// provide customizable query format
// pm2 shutdown timeout

nicobet_account_bridge
hls:
Currency {
	id: "",
	code: "",
	name: "",
	precision: 2,
	status: "" // active, disabled
}
Game {
	id: "",
	code: "",
	name: "",
	configuration: {},
	status: "" // active, disabled
}
User {
	id: "", // our user_id, or guest user id
	[ref_id]: "", // their user id
	accounts: Account[],
	status: "" // active, disabled
}
Account {
	id: "", // our account_id
	[ref_id]: "", // their account_id
	user: User,
	session: Session,
	currency: Currency,
	amount: "", // in decimal
	status: "", // active, closed
	start_date: unix_ms,
	end_date: unix_ms
}
Session {
	id: "",
	[ref_id]: "", // their session_id
	user: User,
	accounts: Account[],
	events: SessionEvent[],
	status: "", // active, finished, terminated, errored
	start_date: unix_ms,
	end_date: unix_ms
}
SessionEvent {
	id: "",
	session: Session,
	[game]: Game, // if the event was game related
	type: "", // play_slot
	[contract]: Contract, // if the event created a contract
	status: "", // pending, finished, cancelled, errored
	start_date: unix_ms, // if the event had a contract, these are the contract dates
	end_date: unix_ms
}
Contract {
	id: "",
	contract_steps: ContractStep[],
	type: "", // play_slot
	status: "", // pending, finalized
	start_date: unix_ms,
	end_date: unix_ms
}
ContractStep {
	id: "",
	[ref_id]: "", // their transaction_id
	contract: Contract,
	transactions: Transaction[],
	type: "", // place_bet, pay_winnings, cancel_winning, refund_bet
	status: "", // pending, finalized
	start_date: unix_ms,
	end_date: unix_ms
}
Transaction {
	id: "",
	contract_step: ContractStep,
	account: Account,
	amount: "", // decimal
	balance_before: "", // decimal
	balance_after: "", // decimal
	create_date: unix_ms
}

auth with dynamic app_auth
/create_session
	{
		[user_id]: "",
		[session_id]: "", // their session_id, if given must be unique
		[session_token]: "", // their session_token, to be sent with our requests
		[game_id]: "" // initial game id to load	
	}
	{
		session: Session,
		client_url: "" // the url to give to the client to load the games, includes client_token
	}
/search_sessions
	{
		from_date: unix_ms,
		[to_date]: unix_ms,
		[user_id]: "", // their user_id
		[status]: ""
	}
	{
		sessions: Session[]
	}
/get_session
	{
		session_id: "",
		[is_our_id]: boolean // whether our or their session_id
	}
	Session
/terminate_session
	{
		session_id: "",
		[is_our_id]: boolean // whether our or their session_id
	}
	Session
/get_transaction
	{
		transaction_id: "",
		[is_our_id]: boolean // whether our or their session_id
	}
	Transaction

hlbs:
Account {
	id: "", // real, bonus
	currency: "TRY",
	amount: "" // decimal
}
TransactionRequest {
	id: "", // our transation_id
	account_id: "", // real, bonus
	amount: "", // decimal
	data: {}
}
auth with dynamic app_auth
/initialize_session
	HLS.Session
	{
		success: true,
		[error]: ""
	}
/get_user_data
	{
		user_id: "" // their user_id
	}
	{
		accounts: Account[]
	}
/create_transaction
	{
		transaction_id: "", // our contract_step_id
		user_id: "", // their user_id
		type: "", // slot.play, slot.win, slot.lose
		data: {}, // session_id, game_id, prize_redemption_id, contract_id, contract_step_id, etc
		prev_transactions: [] // ids of the previous transactions in this contract, if any
		transactions: TransactionRequest[]
	}
	{
		transaction_id: "", // their transaction_id
		accounts: Account[]
	}
/finalize_session
	HLS.Session
	{
		success: true,
		[error]: ""
	}


action flow:
	user visits nicobet
	user logs in
	user visits games page
		nicobet requests /create_session from hls
		nicobet gives client_url to user
		user visits client_url
		client app requests /user/login
		hls user requests /initialize_session from nicobet
	user plays slot
		hls game updates game prize to reserved
		hls account creates contract for user
		hls account requests /create_transaction from nicobet
		hls account updates contract to in_progress
		hls game updates game prize to in_progress
	user views prize
	user notifies hls game that viewing is over or viewing timeout is reached
		hls game updates game prize to return_pending
		hls account updates contract to return_pending
		hls account requests /create_transaction from nicobet
		hls account updates contract to finalized
		hls game updates game prize to finished
	user exits games page or heartbeat timeout is reached
		hls user requests /finalize_session from nicobet