ENV {
	mode: "init/dev/prod"
	env_id // given
}

local.config
{
	public: {
		app_id,
		local_id,
		ssl_public_key,
		ssl_ca,
		master_key // hex_shuffle(hash(local_id + env_id))
	},
	private: { // encrypted with master_key
		admin_key,
		ssl_private_key,
		db_connection_info,
		api_access_info // endpoint_manager only
	}
}

/app/init // ENV
{
	app_id,
	ssl_public_key, // path
	ssl_private_key, // path
	init_config_file // path
}:{
	config_file, // save to path
	admin_key
}

/app/create_invitation // session/admin_key
{
	client_id,
	ssl_public_key,
	url?
}:{
	invitation_token
}
call /manager/add_client // api_access_info, except manager itself

/app/register_service // session/admin_key
{
	service_id,
	ssl_public_key,
	url,
	invitation_token
}

manager.config: {
	public: {

	},
	private: {
		api_access_info
	}
}

app_structure
	localization: id, namespace, value_type, value_en, value_tr
	role: id, index, name
	permission: id, name, config
	role_permission: id, role_id, permission_id, config

	service: id, name
		endpoint_manager
		secrets_manager
		user_manager
		web_admin
	app: id, name, services, config
	app_service_client: id, service_app_id, client_app_id, service_config, client_config

	app_log: span_id, type, level, name, data, create_date, min_keep_age
	data_change_log: id, diff, description, change_tick, create_date, min_keep_age, app_id, function_id, user_id, device_id, session_id, origin_address, span_chain

	client_device: id, name, status, create_date, last_use_date, prev_device_id
	app_user: id, name, status, user_info, auth_data, roles
	app_session: id, user_id, device_id, status, roles, update_tokens

base app
	/app/init // ENV.mode=init only
	/app/register_service
	/app/create_client_token
	/app/get_local_config // localhost & admin_key only
	/app/get_config // admin_key/manager only
	/app/prepare_config // admin_key/manager only
manager app
	/manager/get_me // localization/role/permission/role_permission/config
	/manager/get_services
	/manager/get_apps
	/manager/update_me
	/manager/notify
secrets app
	/secrets/get_keys
user app
	/user/create
	/user/update
	/user/login
	/user/logout
	/user/refresh
	/user/get_update_tokens

start manager in init mode
manager/app/init
start secrets in init mode
secrets/app/init
manager/app/create_client_token for secrets
secrets/app/register_service manager

app init cycle
	read env
	read config.json
		decypher master_key
		get local.private
	get manager/get_config or cached
	get manager/get_app_data or cached
	get manager/get_clients or cached
	get secrets/get_keys or cached
	create and connect database pools
	create and start services
	create and start workers
	create and start handlers
	create and start servers
	notify manager/notify
	stop servers
	await and stop handlers
	await and stop workers
	await and stop services
	await and stop database pools
	notify manager/notify

